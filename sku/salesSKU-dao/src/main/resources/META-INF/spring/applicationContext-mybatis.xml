<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd"
	default-autowire="byName" default-lazy-init="false">

	<context:property-placeholder location="classpath*:jdbc.properties"
		ignore-unresolvable="true" />
	<bean id="salesSKU.dbcp" destroy-method="close" abstract="true">
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="initialSize" value="${jdbc.initialSize}" />
		<property name="maxWait" value="${jdbc.maxWait}" />
		<property name="maxIdle" value="${jdbc.maxIdle}" />
		<property name="minIdle" value="${jdbc.minIdle}" />
		<property name="maxActive" value="${jdbc.maxActive}" />

		<property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}" />
		<property name="minEvictableIdleTimeMillis" value="${jdbc.minEvictableIdleTimeMillis}" />

		<property name="removeAbandoned" value="${jdbc.removeAbandoned}" />
		<property name="removeAbandonedTimeout" value="${jdbc.removeAbandonedTimeout}" />

		<property name="validationQuery" value="${jdbc.validationQuery}" />
		<property name="testWhileIdle" value="${jdbc.testWhileIdle}" />
		<property name="testOnBorrow" value="${jdbc.testOnBorrow}" />
		<property name="testOnReturn" value="${jdbc.testOnReturn}" />

		<property name="filters" value="stat" />
	</bean>
	<bean id="salesSKU.write" parent="salesSKU.dbcp"
		class="com.alibaba.druid.pool.DruidDataSource">
		<property value="${salesSKU.write.url}" name="url" />
		<property value="${salesSKU.write.username}" name="username" />
		<property value="${salesSKU.write.password}" name="password" />
	</bean>
	<bean id="salesSKU.sqlSessionFactoryBean.W" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="salesSKU.write" />
		<property name="configLocation"
			value="classpath:META-INF/mybatis/mybatis-config.xml" />
		<property name="mapperLocations">
			<array>
				<value>classpath*:mappings/base/sku/mapper/*Mapper.xml</value>
				<value>classpath*:mappings/base/product/*Mapper.xml</value>
				<value>classpath*:mappings/base/strategy/*Mapper.xml</value>
			</array>
		</property>
	</bean>

	<bean id="salesSKU.mapperScannerConfigurer.W" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.pzj.base.product,com.pzj.base.sku.mapper,com.pzj.base.strategy" />
		<property name="sqlSessionFactoryBeanName" value="salesSKU.sqlSessionFactoryBean.W" />
	</bean>
</beans>